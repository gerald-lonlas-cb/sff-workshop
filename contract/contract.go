// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// RetailOrderEscrowOrderRedeemRequest is an auto generated low-level Go binding around an user-defined struct.
type RetailOrderEscrowOrderRedeemRequest struct {
	From    common.Address
	OrderId string
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant_address\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"}],\"name\":\"getOrderStatus\",\"outputs\":[{\"internalType\":\"enumRetailOrderEscrow.OrderStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"enumRetailOrderEscrow.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"overrideOrderStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"}],\"internalType\":\"structRetailOrderEscrow.OrderRedeemRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"}],\"internalType\":\"structRetailOrderEscrow.OrderRedeemRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101606040526040518060800160405280604c81526020016200640a604c9139600790816200002f919062000621565b503480156200003c575f80fd5b506040518060400160405280601181526020017f52657461696c4f72646572457363726f770000000000000000000000000000008152506040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525060405180602001604052805f815250620000c981620001ba60201b60201c565b50620000e0600383620001cf60201b90919060201c565b6101208181525050620000fe600482620001cf60201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a081815250506200013d6200022460201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050506200019a6200018e6200028060201b60201c565b6200028760201b60201c565b5f600560146101000a81548160ff02191690831515021790555062000918565b8060029081620001cb919062000621565b5050565b5f602083511015620001f457620001ec836200034a60201b60201c565b90506200021e565b826200020683620003b460201b60201c565b5f01908162000216919062000621565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016200026595949392919062000773565b60405160208183030381529060405280519060200120905090565b5f33905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80829050601f815111156200039957826040517f305a27a900000000000000000000000000000000000000000000000000000000815260040162000390919062000858565b60405180910390fd5b805181620003a790620008a9565b5f1c175f1b915050919050565b5f819050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200043957607f821691505b6020821081036200044f576200044e620003f4565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004b37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000476565b620004bf868362000476565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200050962000503620004fd84620004d7565b620004e0565b620004d7565b9050919050565b5f819050919050565b6200052483620004e9565b6200053c620005338262000510565b84845462000482565b825550505050565b5f90565b6200055262000544565b6200055f81848462000519565b505050565b5b8181101562000586576200057a5f8262000548565b60018101905062000565565b5050565b601f821115620005d5576200059f8162000455565b620005aa8462000467565b81016020851015620005ba578190505b620005d2620005c98562000467565b83018262000564565b50505b505050565b5f82821c905092915050565b5f620005f75f1984600802620005da565b1980831691505092915050565b5f620006118383620005e6565b9150826002028217905092915050565b6200062c82620003bd565b67ffffffffffffffff811115620006485762000647620003c7565b5b62000654825462000421565b620006618282856200058a565b5f60209050601f83116001811462000697575f841562000682578287015190505b6200068e858262000604565b865550620006fd565b601f198416620006a78662000455565b5f5b82811015620006d057848901518255600182019150602085019450602081019050620006a9565b86831015620006f05784890151620006ec601f891682620005e6565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b620007198162000705565b82525050565b6200072a81620004d7565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200075b8262000730565b9050919050565b6200076d816200074f565b82525050565b5f60a082019050620007885f8301886200070e565b6200079760208301876200070e565b620007a660408301866200070e565b620007b560608301856200071f565b620007c4608083018462000762565b9695505050505050565b5f82825260208201905092915050565b5f5b83811015620007fd578082015181840152602081019050620007e0565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6200082482620003bd565b620008308185620007ce565b935062000842818560208601620007de565b6200084d8162000808565b840191505092915050565b5f6020820190508181035f83015262000872818462000818565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f620008a0825162000705565b80915050919050565b5f620008b5826200087a565b82620008c18462000884565b9050620008ce8162000893565b9250602082101562000911576200090c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000476565b831692505b5050919050565b60805160a05160c05160e051610100516101205161014051615aa06200096a5f395f610c1101525f610bdd01525f61347b01525f61345a01525f612f6001525f612fb601525f612fdf0152615aa05ff3fe608060405234801561000f575f80fd5b50600436106101c1575f3560e01c80638456cb59116100f7578063c2558ffd11610095578063e985e9c51161006f578063e985e9c5146104db578063f242432a1461050b578063f2fde38b14610527578063f5298aca14610543576101c1565b8063c2558ffd14610473578063d2b1d2c31461048f578063d9097d32146104bf576101c1565b80638fb16e50116100d15780638fb16e50146103db578063a22cb465146103f7578063aedfb5d314610413578063bd85b03914610443576101c1565b80638456cb591461038f57806384b0196e146103995780638da5cb5b146103bd576101c1565b80633f4ba83a116101645780635c975abb1161013e5780635c975abb1461032f5780636b20c4541461034d578063715018a614610369578063731133e914610373576101c1565b80633f4ba83a146102c55780634e1273f4146102cf5780634f558e79146102ff576101c1565b80630e89341c116101a05780630e89341c1461024157806310f2f61d146102715780631f7fdffa1461028d5780632eb2c2d6146102a9576101c1565b8062fdd58e146101c557806301ffc9a7146101f557806302fe530514610225575b5f80fd5b6101df60048036038101906101da9190613649565b61055f565b6040516101ec9190613696565b60405180910390f35b61020f600480360381019061020a9190613704565b610622565b60405161021c9190613749565b60405180910390f35b61023f600480360381019061023a919061389e565b610703565b005b61025b600480360381019061025691906138e5565b61071e565b604051610268919061398a565b60405180910390f35b61028b600480360381019061028691906139aa565b610752565b005b6102a760048036038101906102a29190613b78565b6108f4565b005b6102c360048036038101906102be9190613c30565b610906565b005b6102cd6109a7565b005b6102e960048036038101906102e49190613dbb565b6109b9565b6040516102f69190613ee8565b60405180910390f35b610319600480360381019061031491906138e5565b610ad0565b6040516103269190613749565b60405180910390f35b610337610ae3565b6040516103449190613749565b60405180910390f35b61036760048036038101906103629190613f08565b610af9565b005b610371610b96565b005b61038d60048036038101906103889190613f90565b610ba9565b005b610397610bbb565b005b6103a1610bcd565b6040516103b49796959493929190614071565b60405180910390f35b6103c5610cca565b6040516103d291906140f3565b60405180910390f35b6103f560048036038101906103f0919061412f565b610cf2565b005b610411600480360381019061040c91906141b3565b610df5565b005b61042d6004803603810190610428919061389e565b610e0b565b60405161043a9190614264565b60405180910390f35b61045d600480360381019061045891906138e5565b610f50565b60405161046a9190613696565b60405180910390f35b61048d6004803603810190610488919061389e565b610f6a565b005b6104a960048036038101906104a491906142f8565b61103b565b6040516104b69190613749565b60405180910390f35b6104d960048036038101906104d491906142f8565b611167565b005b6104f560048036038101906104f09190614371565b611294565b6040516105029190613749565b60405180910390f35b610525600480360381019061052091906143af565b611322565b005b610541600480360381019061053c9190614442565b6113c3565b005b61055d6004803603810190610558919061446d565b611445565b005b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c59061452d565b60405180910390fd5b5f808381526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f7fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106ec57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106fc57506106fb826114e2565b5b9050919050565b61070b61154b565b806007908161071a9190614745565b5050565b6060600761072b836115c9565b60405160200161073c929190614918565b6040516020818303038152906040529050919050565b61075a611693565b5f73ffffffffffffffffffffffffffffffffffffffff166008846040516107819190614946565b90815260200160405180910390206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff906149a6565b60405180910390fd5b5f60405180606001604052808481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020015f6002811115610849576108486141f1565b5b81525090508060088560405161085f9190614946565b90815260200160405180910390205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360028111156108e6576108e56141f1565b5b021790555090505050505050565b610900848484846116dd565b50505050565b61090e6118fd565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061095457506109538561094e6118fd565b611294565b5b610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098a90614a34565b60405180910390fd5b6109a08585858585611904565b5050505050565b6109af61154b565b6109b7611c12565b565b606081518351146109ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f690614ac2565b60405180910390fd5b5f835167ffffffffffffffff811115610a1b57610a1a61377a565b5b604051908082528060200260200182016040528015610a495781602001602082028036833780820191505090505b5090505f5b8451811015610ac557610a95858281518110610a6d57610a6c614ae0565b5b6020026020010151858381518110610a8857610a87614ae0565b5b602002602001015161055f565b828281518110610aa857610aa7614ae0565b5b60200260200101818152505080610abe90614b3a565b9050610a4e565b508091505092915050565b5f80610adb83610f50565b119050919050565b5f600560149054906101000a900460ff16905090565b610b016118fd565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610b475750610b4683610b416118fd565b611294565b5b610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90614a34565b60405180910390fd5b610b91838383611c74565b505050565b610b9e61154b565b610ba75f611f2f565b565b610bb584848484611ff2565b50505050565b610bc361154b565b610bcb612195565b565b5f6060805f805f6060610c0a60037f00000000000000000000000000000000000000000000000000000000000000006121f890919063ffffffff16565b610c3e60047f00000000000000000000000000000000000000000000000000000000000000006121f890919063ffffffff16565b46305f801b5f67ffffffffffffffff811115610c5d57610c5c61377a565b5b604051908082528060200260200182016040528015610c8b5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cfa61154b565b5f73ffffffffffffffffffffffffffffffffffffffff16600883604051610d219190614946565b90815260200160405180910390206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f90614bcb565b60405180910390fd5b80600883604051610db99190614946565b908152602001604051809103902060010160146101000a81548160ff02191690836002811115610dec57610deb6141f1565b5b02179055505050565b610e07610e006118fd565b83836122a5565b5050565b5f80600883604051610e1d9190614946565b90815260200160405180910390206040518060600160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff166002811115610eb957610eb86141f1565b5b6002811115610ecb57610eca6141f1565b5b8152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90614bcb565b60405180910390fd5b8060400151915050919050565b5f60065f8381526020019081526020015f20549050919050565b610f72611693565b5f600882604051610f839190614946565b908152602001604051809103902090505f6002811115610fa657610fa56141f1565b5b8160010160149054906101000a900460ff166002811115610fca57610fc96141f1565b5b1461100a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100190614c33565b60405180910390fd5b60028160010160146101000a81548160ff02191690836002811115611032576110316141f1565b5b02179055505050565b5f8061111b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061110d7f9839a55ac0698409bdbef731ca3b75abf09c92f0057aa04df68a5b199589a2fb885f0160208101906110ba9190614442565b8980602001906110ca9190614c5d565b6040516110d8929190614ced565b60405180910390206040516020016110f293929190614d05565b6040516020818303038152906040528051906020012061240c565b61242590919063ffffffff16565b9050845f01602081019061112f9190614442565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b61116f611693565b5f60088480602001906111829190614c5d565b604051611190929190614d5e565b908152602001604051809103902090505f60028111156111b3576111b26141f1565b5b8160010160149054906101000a900460ff1660028111156111d7576111d66141f1565b5b14611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90614dc0565b60405180910390fd5b61122284848461103b565b611261576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125890614e28565b60405180910390fd5b60018160010160146101000a81548160ff02191690836002811115611289576112886141f1565b5b021790555050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b61132a6118fd565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611370575061136f8561136a6118fd565b611294565b5b6113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a690614a34565b60405180910390fd5b6113bc858585858561244a565b5050505050565b6113cb61154b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143090614eb6565b60405180910390fd5b61144281611f2f565b50565b61144d6118fd565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061149357506114928361148d6118fd565b611294565b5b6114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990614a34565b60405180910390fd5b6114dd8383836126d3565b505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6115536118fd565b73ffffffffffffffffffffffffffffffffffffffff16611571610cca565b73ffffffffffffffffffffffffffffffffffffffff16146115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be90614f1e565b60405180910390fd5b565b60605f60016115d784612907565b0190505f8167ffffffffffffffff8111156115f5576115f461377a565b5b6040519080825280601f01601f1916602001820160405280156116275781602001600182028036833780820191505090505b5090505f82602001820190505b600115611688578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161167d5761167c614f3c565b5b0494505f8503611634575b819350505050919050565b61169b610ae3565b156116db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d290614fb3565b60405180910390fd5b565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361174b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174290615041565b60405180910390fd5b815183511461178f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611786906150cf565b60405180910390fd5b5f6117986118fd565b90506117a8815f87878787612a58565b5f5b845181101561185b578381815181106117c6576117c5614ae0565b5b60200260200101515f808784815181106117e3576117e2614ae0565b5b602002602001015181526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461184191906150ed565b92505081905550808061185390614b3a565b9150506117aa565b508473ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118d2929190615120565b60405180910390a46118e8815f87878787612a76565b6118f6815f87878787612a7e565b5050505050565b5f33905090565b8151835114611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f906150cf565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036119b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ad906151c5565b60405180910390fd5b5f6119bf6118fd565b90506119cf818787878787612a58565b5f5b8451811015611b6f575f8582815181106119ee576119ed614ae0565b5b602002602001015190505f858381518110611a0c57611a0b614ae0565b5b602002602001015190505f805f8481526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9f90615253565b60405180910390fd5b8181035f808581526020019081526020015f205f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808581526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611b5491906150ed565b9250508190555050505080611b6890614b3a565b90506119d1565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611be6929190615120565b60405180910390a4611bfc818787878787612a76565b611c0a818787878787612a7e565b505050505050565b611c1a612c54565b5f600560146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c5d6118fd565b604051611c6a91906140f3565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd9906152e1565b60405180910390fd5b8051825114611d26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1d906150cf565b60405180910390fd5b5f611d2f6118fd565b9050611d4d81855f868660405180602001604052805f815250612a58565b5f5b8351811015611e8e575f848281518110611d6c57611d6b614ae0565b5b602002602001015190505f848381518110611d8a57611d89614ae0565b5b602002602001015190505f805f8481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d9061536f565b60405180910390fd5b8181035f808581526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050508080611e8690614b3a565b915050611d4f565b505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f05929190615120565b60405180910390a4611f2981855f868660405180602001604052805f815250612a76565b50505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205790615041565b60405180910390fd5b5f6120696118fd565b90505f61207585612c9d565b90505f61208185612c9d565b9050612091835f89858589612a58565b845f808881526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546120eb91906150ed565b925050819055508673ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161216892919061538d565b60405180910390a461217e835f89858589612a76565b61218c835f89898989612d15565b50505050505050565b61219d611693565b6001600560146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121e16118fd565b6040516121ee91906140f3565b60405180910390a1565b606060ff5f1b83146122145761220d83612eeb565b905061229f565b81805461222090614578565b80601f016020809104026020016040519081016040528092919081815260200182805461224c90614578565b80156122975780601f1061226e57610100808354040283529160200191612297565b820191905f5260205f20905b81548152906001019060200180831161227a57829003601f168201915b505050505090505b92915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230a90615424565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123ff9190613749565b60405180910390a3505050565b5f61241e612418612f5d565b83613013565b9050919050565b5f805f6124328585613053565b9150915061243f8161309f565b819250505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036124b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124af906151c5565b60405180910390fd5b5f6124c16118fd565b90505f6124cd85612c9d565b90505f6124d985612c9d565b90506124e9838989858589612a58565b5f805f8881526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508581101561257b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257290615253565b60405180910390fd5b8581035f808981526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550855f808981526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461262791906150ed565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516126a492919061538d565b60405180910390a46126ba848a8a86868a612a76565b6126c8848a8a8a8a8a612d15565b505050505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612741576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612738906152e1565b60405180910390fd5b5f61274a6118fd565b90505f61275684612c9d565b90505f61276284612c9d565b905061278083875f858560405180602001604052805f815250612a58565b5f805f8781526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905084811015612812576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128099061536f565b60405180910390fd5b8481035f808881526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516128da92919061538d565b60405180910390a46128fe84885f868660405180602001604052805f815250612a76565b50505050505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612963577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161295957612958614f3c565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129a0576d04ee2d6d415b85acef8100000000838161299657612995614f3c565b5b0492506020810190505b662386f26fc1000083106129cf57662386f26fc1000083816129c5576129c4614f3c565b5b0492506010810190505b6305f5e10083106129f8576305f5e10083816129ee576129ed614f3c565b5b0492506008810190505b6127108310612a1d576127108381612a1357612a12614f3c565b5b0492506004810190505b60648310612a405760648381612a3657612a35614f3c565b5b0492506002810190505b600a8310612a4f576001810190505b80915050919050565b612a60611693565b612a6e868686868686613204565b505050505050565b505050505050565b612a9d8473ffffffffffffffffffffffffffffffffffffffff166133c6565b15612c4c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612ae3959493929190615494565b6020604051808303815f875af1925050508015612b1e57506040513d601f19601f82011682018060405250810190612b1b919061550e565b60015b612bc357612b2a615545565b806308c379a003612b865750612b3e615564565b80612b495750612b88565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7d919061398a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bba90615663565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c41906156f1565b60405180910390fd5b505b505050505050565b612c5c610ae3565b612c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9290615759565b60405180910390fd5b565b60605f600167ffffffffffffffff811115612cbb57612cba61377a565b5b604051908082528060200260200182016040528015612ce95781602001602082028036833780820191505090505b50905082815f81518110612d0057612cff614ae0565b5b60200260200101818152505080915050919050565b612d348473ffffffffffffffffffffffffffffffffffffffff166133c6565b15612ee3578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d7a959493929190615777565b6020604051808303815f875af1925050508015612db557506040513d601f19601f82011682018060405250810190612db2919061550e565b60015b612e5a57612dc1615545565b806308c379a003612e1d5750612dd5615564565b80612de05750612e1f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e14919061398a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5190615663565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed8906156f1565b60405180910390fd5b505b505050505050565b60605f612ef7836133e8565b90505f602067ffffffffffffffff811115612f1557612f1461377a565b5b6040519080825280601f01601f191660200182016040528015612f475781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015612fd857507f000000000000000000000000000000000000000000000000000000000000000046145b15613005577f00000000000000000000000000000000000000000000000000000000000000009050613010565b61300d613436565b90505b90565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f806041835103613090575f805f602086015192506040860151915060608601515f1a9050613084878285856134cb565b94509450505050613098565b5f6002915091505b9250929050565b5f60048111156130b2576130b16141f1565b5b8160048111156130c5576130c46141f1565b5b031561320157600160048111156130df576130de6141f1565b5b8160048111156130f2576130f16141f1565b5b03613132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312990615819565b60405180910390fd5b60026004811115613146576131456141f1565b5b816004811115613159576131586141f1565b5b03613199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161319090615881565b60405180910390fd5b600360048111156131ad576131ac6141f1565b5b8160048111156131c0576131bf6141f1565b5b03613200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f79061590f565b60405180910390fd5b5b50565b6132128686868686866135a3565b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036132be575f5b83518110156132bc5782818151811061326357613262614ae0565b5b602002602001015160065f86848151811061328157613280614ae0565b5b602002602001015181526020019081526020015f205f8282546132a491906150ed565b92505081905550806132b590614b3a565b9050613247565b505b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036133be575f5b83518110156133bc575f8482815181106133105761330f614ae0565b5b602002602001015190505f84838151811061332e5761332d614ae0565b5b602002602001015190505f60065f8481526020019081526020015f2054905081811015613390576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133879061599d565b60405180910390fd5b81810360065f8581526020019081526020015f2081905550505050806133b590614b3a565b90506132f3565b505b505050505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f8060ff835f1c169050601f81111561342d576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016134b09594939291906159bb565b60405160208183030381529060405280519060200120905090565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c1115613503575f60039150915061359a565b5f6001878787876040515f81526020016040526040516135269493929190615a27565b6020604051602081039080840390855afa158015613546573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613592575f6001925092505061359a565b805f92509250505b94509492505050565b505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6135e5826135bc565b9050919050565b6135f5816135db565b81146135ff575f80fd5b50565b5f81359050613610816135ec565b92915050565b5f819050919050565b61362881613616565b8114613632575f80fd5b50565b5f813590506136438161361f565b92915050565b5f806040838503121561365f5761365e6135b4565b5b5f61366c85828601613602565b925050602061367d85828601613635565b9150509250929050565b61369081613616565b82525050565b5f6020820190506136a95f830184613687565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136e3816136af565b81146136ed575f80fd5b50565b5f813590506136fe816136da565b92915050565b5f60208284031215613719576137186135b4565b5b5f613726848285016136f0565b91505092915050565b5f8115159050919050565b6137438161372f565b82525050565b5f60208201905061375c5f83018461373a565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6137b08261376a565b810181811067ffffffffffffffff821117156137cf576137ce61377a565b5b80604052505050565b5f6137e16135ab565b90506137ed82826137a7565b919050565b5f67ffffffffffffffff82111561380c5761380b61377a565b5b6138158261376a565b9050602081019050919050565b828183375f83830152505050565b5f61384261383d846137f2565b6137d8565b90508281526020810184848401111561385e5761385d613766565b5b613869848285613822565b509392505050565b5f82601f83011261388557613884613762565b5b8135613895848260208601613830565b91505092915050565b5f602082840312156138b3576138b26135b4565b5b5f82013567ffffffffffffffff8111156138d0576138cf6135b8565b5b6138dc84828501613871565b91505092915050565b5f602082840312156138fa576138f96135b4565b5b5f61390784828501613635565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561394757808201518184015260208101905061392c565b5f8484015250505050565b5f61395c82613910565b613966818561391a565b935061397681856020860161392a565b61397f8161376a565b840191505092915050565b5f6020820190508181035f8301526139a28184613952565b905092915050565b5f805f606084860312156139c1576139c06135b4565b5b5f84013567ffffffffffffffff8111156139de576139dd6135b8565b5b6139ea86828701613871565b93505060206139fb86828701613635565b9250506040613a0c86828701613602565b9150509250925092565b5f67ffffffffffffffff821115613a3057613a2f61377a565b5b602082029050602081019050919050565b5f80fd5b5f613a57613a5284613a16565b6137d8565b90508083825260208201905060208402830185811115613a7a57613a79613a41565b5b835b81811015613aa35780613a8f8882613635565b845260208401935050602081019050613a7c565b5050509392505050565b5f82601f830112613ac157613ac0613762565b5b8135613ad1848260208601613a45565b91505092915050565b5f67ffffffffffffffff821115613af457613af361377a565b5b613afd8261376a565b9050602081019050919050565b5f613b1c613b1784613ada565b6137d8565b905082815260208101848484011115613b3857613b37613766565b5b613b43848285613822565b509392505050565b5f82601f830112613b5f57613b5e613762565b5b8135613b6f848260208601613b0a565b91505092915050565b5f805f8060808587031215613b9057613b8f6135b4565b5b5f613b9d87828801613602565b945050602085013567ffffffffffffffff811115613bbe57613bbd6135b8565b5b613bca87828801613aad565b935050604085013567ffffffffffffffff811115613beb57613bea6135b8565b5b613bf787828801613aad565b925050606085013567ffffffffffffffff811115613c1857613c176135b8565b5b613c2487828801613b4b565b91505092959194509250565b5f805f805f60a08688031215613c4957613c486135b4565b5b5f613c5688828901613602565b9550506020613c6788828901613602565b945050604086013567ffffffffffffffff811115613c8857613c876135b8565b5b613c9488828901613aad565b935050606086013567ffffffffffffffff811115613cb557613cb46135b8565b5b613cc188828901613aad565b925050608086013567ffffffffffffffff811115613ce257613ce16135b8565b5b613cee88828901613b4b565b9150509295509295909350565b5f67ffffffffffffffff821115613d1557613d1461377a565b5b602082029050602081019050919050565b5f613d38613d3384613cfb565b6137d8565b90508083825260208201905060208402830185811115613d5b57613d5a613a41565b5b835b81811015613d845780613d708882613602565b845260208401935050602081019050613d5d565b5050509392505050565b5f82601f830112613da257613da1613762565b5b8135613db2848260208601613d26565b91505092915050565b5f8060408385031215613dd157613dd06135b4565b5b5f83013567ffffffffffffffff811115613dee57613ded6135b8565b5b613dfa85828601613d8e565b925050602083013567ffffffffffffffff811115613e1b57613e1a6135b8565b5b613e2785828601613aad565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b613e6381613616565b82525050565b5f613e748383613e5a565b60208301905092915050565b5f602082019050919050565b5f613e9682613e31565b613ea08185613e3b565b9350613eab83613e4b565b805f5b83811015613edb578151613ec28882613e69565b9750613ecd83613e80565b925050600181019050613eae565b5085935050505092915050565b5f6020820190508181035f830152613f008184613e8c565b905092915050565b5f805f60608486031215613f1f57613f1e6135b4565b5b5f613f2c86828701613602565b935050602084013567ffffffffffffffff811115613f4d57613f4c6135b8565b5b613f5986828701613aad565b925050604084013567ffffffffffffffff811115613f7a57613f796135b8565b5b613f8686828701613aad565b9150509250925092565b5f805f8060808587031215613fa857613fa76135b4565b5b5f613fb587828801613602565b9450506020613fc687828801613635565b9350506040613fd787828801613635565b925050606085013567ffffffffffffffff811115613ff857613ff76135b8565b5b61400487828801613b4b565b91505092959194509250565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61404481614010565b82525050565b614053816135db565b82525050565b5f819050919050565b61406b81614059565b82525050565b5f60e0820190506140845f83018a61403b565b81810360208301526140968189613952565b905081810360408301526140aa8188613952565b90506140b96060830187613687565b6140c6608083018661404a565b6140d360a0830185614062565b81810360c08301526140e58184613e8c565b905098975050505050505050565b5f6020820190506141065f83018461404a565b92915050565b60038110614118575f80fd5b50565b5f813590506141298161410c565b92915050565b5f8060408385031215614145576141446135b4565b5b5f83013567ffffffffffffffff811115614162576141616135b8565b5b61416e85828601613871565b925050602061417f8582860161411b565b9150509250929050565b6141928161372f565b811461419c575f80fd5b50565b5f813590506141ad81614189565b92915050565b5f80604083850312156141c9576141c86135b4565b5b5f6141d685828601613602565b92505060206141e78582860161419f565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061422f5761422e6141f1565b5b50565b5f81905061423f8261421e565b919050565b5f61424e82614232565b9050919050565b61425e81614244565b82525050565b5f6020820190506142775f830184614255565b92915050565b5f80fd5b5f604082840312156142965761429561427d565b5b81905092915050565b5f80fd5b5f8083601f8401126142b8576142b7613762565b5b8235905067ffffffffffffffff8111156142d5576142d461429f565b5b6020830191508360018202830111156142f1576142f0613a41565b5b9250929050565b5f805f6040848603121561430f5761430e6135b4565b5b5f84013567ffffffffffffffff81111561432c5761432b6135b8565b5b61433886828701614281565b935050602084013567ffffffffffffffff811115614359576143586135b8565b5b614365868287016142a3565b92509250509250925092565b5f8060408385031215614387576143866135b4565b5b5f61439485828601613602565b92505060206143a585828601613602565b9150509250929050565b5f805f805f60a086880312156143c8576143c76135b4565b5b5f6143d588828901613602565b95505060206143e688828901613602565b94505060406143f788828901613635565b935050606061440888828901613635565b925050608086013567ffffffffffffffff811115614429576144286135b8565b5b61443588828901613b4b565b9150509295509295909350565b5f60208284031215614457576144566135b4565b5b5f61446484828501613602565b91505092915050565b5f805f60608486031215614484576144836135b4565b5b5f61449186828701613602565b93505060206144a286828701613635565b92505060406144b386828701613635565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f74206120765f8201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b5f614517602a8361391a565b9150614522826144bd565b604082019050919050565b5f6020820190508181035f8301526145448161450b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061458f57607f821691505b6020821081036145a2576145a161454b565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026146047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145c9565b61460e86836145c9565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61464961464461463f84613616565b614626565b613616565b9050919050565b5f819050919050565b6146628361462f565b61467661466e82614650565b8484546145d5565b825550505050565b5f90565b61468a61467e565b614695818484614659565b505050565b5b818110156146b8576146ad5f82614682565b60018101905061469b565b5050565b601f8211156146fd576146ce816145a8565b6146d7846145ba565b810160208510156146e6578190505b6146fa6146f2856145ba565b83018261469a565b50505b505050565b5f82821c905092915050565b5f61471d5f1984600802614702565b1980831691505092915050565b5f614735838361470e565b9150826002028217905092915050565b61474e82613910565b67ffffffffffffffff8111156147675761476661377a565b5b6147718254614578565b61477c8282856146bc565b5f60209050601f8311600181146147ad575f841561479b578287015190505b6147a5858261472a565b86555061480c565b601f1984166147bb866145a8565b5f5b828110156147e2578489015182556001820191506020850194506020810190506147bd565b868310156147ff57848901516147fb601f89168261470e565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f815461482a81614578565b6148348186614814565b9450600182165f811461484e576001811461486357614895565b60ff1983168652811515820286019350614895565b61486c856145a8565b5f5b8381101561488d5781548189015260018201915060208101905061486e565b838801955050505b50505092915050565b5f6148a882613910565b6148b28185614814565b93506148c281856020860161392a565b80840191505092915050565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000005f82015250565b5f614902600583614814565b915061490d826148ce565b600582019050919050565b5f614923828561481e565b915061492f828461489e565b915061493a826148f6565b91508190509392505050565b5f614951828461489e565b915081905092915050565b7f4f7264657220616c7265616479206578697374730000000000000000000000005f82015250565b5f61499060148361391a565b915061499b8261495c565b602082019050919050565b5f6020820190508181035f8301526149bd81614984565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e5f8201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b5f614a1e602e8361391a565b9150614a29826149c4565b604082019050919050565b5f6020820190508181035f830152614a4b81614a12565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e6774685f8201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b5f614aac60298361391a565b9150614ab782614a52565b604082019050919050565b5f6020820190508181035f830152614ad981614aa0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614b4482613616565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614b7657614b75614b0d565b5b600182019050919050565b7f4f7264657220646f6573206e6f742065786973740000000000000000000000005f82015250565b5f614bb560148361391a565b9150614bc082614b81565b602082019050919050565b5f6020820190508181035f830152614be281614ba9565b9050919050565b7f43616e6e6f742063616e63656c206f72646572000000000000000000000000005f82015250565b5f614c1d60138361391a565b9150614c2882614be9565b602082019050919050565b5f6020820190508181035f830152614c4a81614c11565b9050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112614c7957614c78614c51565b5b80840192508235915067ffffffffffffffff821115614c9b57614c9a614c55565b5b602083019250600182023603831315614cb757614cb6614c59565b5b509250929050565b5f81905092915050565b5f614cd48385614cbf565b9350614ce1838584613822565b82840190509392505050565b5f614cf9828486614cc9565b91508190509392505050565b5f606082019050614d185f830186614062565b614d25602083018561404a565b614d326040830184614062565b949350505050565b5f614d458385614814565b9350614d52838584613822565b82840190509392505050565b5f614d6a828486614d3a565b91508190509392505050565b7f43616e6e6f742072656465656d206f72646572000000000000000000000000005f82015250565b5f614daa60138361391a565b9150614db582614d76565b602082019050919050565b5f6020820190508181035f830152614dd781614d9e565b9050919050565b7f496e76616c6964207369676e61747572650000000000000000000000000000005f82015250565b5f614e1260118361391a565b9150614e1d82614dde565b602082019050919050565b5f6020820190508181035f830152614e3f81614e06565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f614ea060268361391a565b9150614eab82614e46565b604082019050919050565b5f6020820190508181035f830152614ecd81614e94565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f614f0860208361391a565b9150614f1382614ed4565b602082019050919050565b5f6020820190508181035f830152614f3581614efc565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f614f9d60108361391a565b9150614fa882614f69565b602082019050919050565b5f6020820190508181035f830152614fca81614f91565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f61502b60218361391a565b915061503682614fd1565b604082019050919050565b5f6020820190508181035f8301526150588161501f565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e677468205f8201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b5f6150b960288361391a565b91506150c48261505f565b604082019050919050565b5f6020820190508181035f8301526150e6816150ad565b9050919050565b5f6150f782613616565b915061510283613616565b925082820190508082111561511a57615119614b0d565b5b92915050565b5f6040820190508181035f8301526151388185613e8c565b9050818103602083015261514c8184613e8c565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f6151af60258361391a565b91506151ba82615155565b604082019050919050565b5f6020820190508181035f8301526151dc816151a3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f5f8201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b5f61523d602a8361391a565b9150615248826151e3565b604082019050919050565b5f6020820190508181035f83015261526a81615231565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6152cb60238361391a565b91506152d682615271565b604082019050919050565b5f6020820190508181035f8301526152f8816152bf565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c5f8201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b5f61535960248361391a565b9150615364826152ff565b604082019050919050565b5f6020820190508181035f8301526153868161534d565b9050919050565b5f6040820190506153a05f830185613687565b6153ad6020830184613687565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c207374617475735f8201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b5f61540e60298361391a565b9150615419826153b4565b604082019050919050565b5f6020820190508181035f83015261543b81615402565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f61546682615442565b615470818561544c565b935061548081856020860161392a565b6154898161376a565b840191505092915050565b5f60a0820190506154a75f83018861404a565b6154b4602083018761404a565b81810360408301526154c68186613e8c565b905081810360608301526154da8185613e8c565b905081810360808301526154ee818461545c565b90509695505050505050565b5f81519050615508816136da565b92915050565b5f60208284031215615523576155226135b4565b5b5f615530848285016154fa565b91505092915050565b5f8160e01c9050919050565b5f60033d11156155615760045f803e61555e5f51615539565b90505b90565b5f60443d106155f0576155756135ab565b60043d036004823e80513d602482011167ffffffffffffffff8211171561559d5750506155f0565b808201805167ffffffffffffffff8111156155bb57505050506155f0565b80602083010160043d0385018111156155d85750505050506155f0565b6155e7826020018501866137a7565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d455243313135355f8201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b5f61564d60348361391a565b9150615658826155f3565b604082019050919050565b5f6020820190508181035f83015261567a81615641565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a656374655f8201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b5f6156db60288361391a565b91506156e682615681565b604082019050919050565b5f6020820190508181035f830152615708816156cf565b9050919050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f61574360148361391a565b915061574e8261570f565b602082019050919050565b5f6020820190508181035f83015261577081615737565b9050919050565b5f60a08201905061578a5f83018861404a565b615797602083018761404a565b6157a46040830186613687565b6157b16060830185613687565b81810360808301526157c3818461545c565b90509695505050505050565b7f45434453413a20696e76616c6964207369676e617475726500000000000000005f82015250565b5f61580360188361391a565b915061580e826157cf565b602082019050919050565b5f6020820190508181035f830152615830816157f7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e677468005f82015250565b5f61586b601f8361391a565b915061587682615837565b602082019050919050565b5f6020820190508181035f8301526158988161585f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c5f8201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b5f6158f960228361391a565b91506159048261589f565b604082019050919050565b5f6020820190508181035f830152615926816158ed565b9050919050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f745f8201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b5f61598760288361391a565b91506159928261592d565b604082019050919050565b5f6020820190508181035f8301526159b48161597b565b9050919050565b5f60a0820190506159ce5f830188614062565b6159db6020830187614062565b6159e86040830186614062565b6159f56060830185613687565b615a02608083018461404a565b9695505050505050565b5f60ff82169050919050565b615a2181615a0c565b82525050565b5f608082019050615a3a5f830187614062565b615a476020830186615a18565b615a546040830185614062565b615a616060830184614062565b9594505050505056fea2646970667358221220c5dd7004b0cee31fdc94dfa1420530c5998fe7ee90accee1d0fc75a7ed5d3bb664736f6c6343000814003368747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f53747261697473582f4e46542d4d657461646174612f6d61696e2f6865726f4e4654323032335345502f",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Contract *ContractSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Contract *ContractCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Contract *ContractCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Contract *ContractSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Contract.Contract.BalanceOfBatch(&_Contract.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Contract *ContractCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Contract.Contract.BalanceOfBatch(&_Contract.CallOpts, accounts, ids)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Contract.Contract.Eip712Domain(&_Contract.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Contract.Contract.Eip712Domain(&_Contract.CallOpts)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_Contract *ContractCaller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_Contract *ContractSession) Exists(id *big.Int) (bool, error) {
	return _Contract.Contract.Exists(&_Contract.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_Contract *ContractCallerSession) Exists(id *big.Int) (bool, error) {
	return _Contract.Contract.Exists(&_Contract.CallOpts, id)
}

// GetOrderStatus is a free data retrieval call binding the contract method 0xaedfb5d3.
//
// Solidity: function getOrderStatus(string order_id) view returns(uint8)
func (_Contract *ContractCaller) GetOrderStatus(opts *bind.CallOpts, order_id string) (uint8, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getOrderStatus", order_id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOrderStatus is a free data retrieval call binding the contract method 0xaedfb5d3.
//
// Solidity: function getOrderStatus(string order_id) view returns(uint8)
func (_Contract *ContractSession) GetOrderStatus(order_id string) (uint8, error) {
	return _Contract.Contract.GetOrderStatus(&_Contract.CallOpts, order_id)
}

// GetOrderStatus is a free data retrieval call binding the contract method 0xaedfb5d3.
//
// Solidity: function getOrderStatus(string order_id) view returns(uint8)
func (_Contract *ContractCallerSession) GetOrderStatus(order_id string) (uint8, error) {
	return _Contract.Contract.GetOrderStatus(&_Contract.CallOpts, order_id)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Contract *ContractCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Contract *ContractSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Contract *ContractCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, account, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractSession) Paused() (bool, error) {
	return _Contract.Contract.Paused(&_Contract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractCallerSession) Paused() (bool, error) {
	return _Contract.Contract.Paused(&_Contract.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_Contract *ContractSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts, id)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 token_id) view returns(string)
func (_Contract *ContractCaller) Uri(opts *bind.CallOpts, token_id *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "uri", token_id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 token_id) view returns(string)
func (_Contract *ContractSession) Uri(token_id *big.Int) (string, error) {
	return _Contract.Contract.Uri(&_Contract.CallOpts, token_id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 token_id) view returns(string)
func (_Contract *ContractCallerSession) Uri(token_id *big.Int) (string, error) {
	return _Contract.Contract.Uri(&_Contract.CallOpts, token_id)
}

// Verify is a free data retrieval call binding the contract method 0xd2b1d2c3.
//
// Solidity: function verify((address,string) req, bytes signature) view returns(bool)
func (_Contract *ContractCaller) Verify(opts *bind.CallOpts, req RetailOrderEscrowOrderRedeemRequest, signature []byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "verify", req, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xd2b1d2c3.
//
// Solidity: function verify((address,string) req, bytes signature) view returns(bool)
func (_Contract *ContractSession) Verify(req RetailOrderEscrowOrderRedeemRequest, signature []byte) (bool, error) {
	return _Contract.Contract.Verify(&_Contract.CallOpts, req, signature)
}

// Verify is a free data retrieval call binding the contract method 0xd2b1d2c3.
//
// Solidity: function verify((address,string) req, bytes signature) view returns(bool)
func (_Contract *ContractCallerSession) Verify(req RetailOrderEscrowOrderRedeemRequest, signature []byte) (bool, error) {
	return _Contract.Contract.Verify(&_Contract.CallOpts, req, signature)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Contract *ContractTransactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Contract *ContractSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Burn(&_Contract.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Contract *ContractTransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Burn(&_Contract.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Contract *ContractTransactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Contract *ContractSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.BurnBatch(&_Contract.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Contract *ContractTransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.BurnBatch(&_Contract.TransactOpts, account, ids, values)
}

// CancelOrder is a paid mutator transaction binding the contract method 0xc2558ffd.
//
// Solidity: function cancelOrder(string order_id) returns()
func (_Contract *ContractTransactor) CancelOrder(opts *bind.TransactOpts, order_id string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "cancelOrder", order_id)
}

// CancelOrder is a paid mutator transaction binding the contract method 0xc2558ffd.
//
// Solidity: function cancelOrder(string order_id) returns()
func (_Contract *ContractSession) CancelOrder(order_id string) (*types.Transaction, error) {
	return _Contract.Contract.CancelOrder(&_Contract.TransactOpts, order_id)
}

// CancelOrder is a paid mutator transaction binding the contract method 0xc2558ffd.
//
// Solidity: function cancelOrder(string order_id) returns()
func (_Contract *ContractTransactorSession) CancelOrder(order_id string) (*types.Transaction, error) {
	return _Contract.Contract.CancelOrder(&_Contract.TransactOpts, order_id)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x10f2f61d.
//
// Solidity: function createOrder(string order_id, uint256 amount, address merchant_address) returns()
func (_Contract *ContractTransactor) CreateOrder(opts *bind.TransactOpts, order_id string, amount *big.Int, merchant_address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createOrder", order_id, amount, merchant_address)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x10f2f61d.
//
// Solidity: function createOrder(string order_id, uint256 amount, address merchant_address) returns()
func (_Contract *ContractSession) CreateOrder(order_id string, amount *big.Int, merchant_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.CreateOrder(&_Contract.TransactOpts, order_id, amount, merchant_address)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x10f2f61d.
//
// Solidity: function createOrder(string order_id, uint256 amount, address merchant_address) returns()
func (_Contract *ContractTransactorSession) CreateOrder(order_id string, amount *big.Int, merchant_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.CreateOrder(&_Contract.TransactOpts, order_id, amount, merchant_address)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address account, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractTransactor) Mint(opts *bind.TransactOpts, account common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mint", account, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address account, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractSession) Mint(account common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.Mint(&_Contract.TransactOpts, account, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address account, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractTransactorSession) Mint(account common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.Mint(&_Contract.TransactOpts, account, id, amount, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractTransactor) MintBatch(opts *bind.TransactOpts, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mintBatch", to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractSession) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.MintBatch(&_Contract.TransactOpts, to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractTransactorSession) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.MintBatch(&_Contract.TransactOpts, to, ids, amounts, data)
}

// OverrideOrderStatus is a paid mutator transaction binding the contract method 0x8fb16e50.
//
// Solidity: function overrideOrderStatus(string order_id, uint8 status) returns()
func (_Contract *ContractTransactor) OverrideOrderStatus(opts *bind.TransactOpts, order_id string, status uint8) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "overrideOrderStatus", order_id, status)
}

// OverrideOrderStatus is a paid mutator transaction binding the contract method 0x8fb16e50.
//
// Solidity: function overrideOrderStatus(string order_id, uint8 status) returns()
func (_Contract *ContractSession) OverrideOrderStatus(order_id string, status uint8) (*types.Transaction, error) {
	return _Contract.Contract.OverrideOrderStatus(&_Contract.TransactOpts, order_id, status)
}

// OverrideOrderStatus is a paid mutator transaction binding the contract method 0x8fb16e50.
//
// Solidity: function overrideOrderStatus(string order_id, uint8 status) returns()
func (_Contract *ContractTransactorSession) OverrideOrderStatus(order_id string, status uint8) (*types.Transaction, error) {
	return _Contract.Contract.OverrideOrderStatus(&_Contract.TransactOpts, order_id, status)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Contract *ContractTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Contract *ContractSession) Pause() (*types.Transaction, error) {
	return _Contract.Contract.Pause(&_Contract.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Contract *ContractTransactorSession) Pause() (*types.Transaction, error) {
	return _Contract.Contract.Pause(&_Contract.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0xd9097d32.
//
// Solidity: function redeem((address,string) req, bytes signature) returns()
func (_Contract *ContractTransactor) Redeem(opts *bind.TransactOpts, req RetailOrderEscrowOrderRedeemRequest, signature []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "redeem", req, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0xd9097d32.
//
// Solidity: function redeem((address,string) req, bytes signature) returns()
func (_Contract *ContractSession) Redeem(req RetailOrderEscrowOrderRedeemRequest, signature []byte) (*types.Transaction, error) {
	return _Contract.Contract.Redeem(&_Contract.TransactOpts, req, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0xd9097d32.
//
// Solidity: function redeem((address,string) req, bytes signature) returns()
func (_Contract *ContractTransactorSession) Redeem(req RetailOrderEscrowOrderRedeemRequest, signature []byte) (*types.Transaction, error) {
	return _Contract.Contract.Redeem(&_Contract.TransactOpts, req, signature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeBatchTransferFrom(&_Contract.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeBatchTransferFrom(&_Contract.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string baseUri) returns()
func (_Contract *ContractTransactor) SetURI(opts *bind.TransactOpts, baseUri string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setURI", baseUri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string baseUri) returns()
func (_Contract *ContractSession) SetURI(baseUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetURI(&_Contract.TransactOpts, baseUri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string baseUri) returns()
func (_Contract *ContractTransactorSession) SetURI(baseUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetURI(&_Contract.TransactOpts, baseUri)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Contract *ContractTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Contract *ContractSession) Unpause() (*types.Transaction, error) {
	return _Contract.Contract.Unpause(&_Contract.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Contract *ContractTransactorSession) Unpause() (*types.Transaction, error) {
	return _Contract.Contract.Unpause(&_Contract.TransactOpts)
}

// ContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Contract contract.
type ContractApprovalForAllIterator struct {
	Event *ContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalForAll represents a ApprovalForAll event raised by the Contract contract.
type ContractApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Contract *ContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*ContractApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalForAllIterator{contract: _Contract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Contract *ContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalForAll)
				if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Contract *ContractFilterer) ParseApprovalForAll(log types.Log) (*ContractApprovalForAll, error) {
	event := new(ContractApprovalForAll)
	if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the Contract contract.
type ContractEIP712DomainChangedIterator struct {
	Event *ContractEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEIP712DomainChanged represents a EIP712DomainChanged event raised by the Contract contract.
type ContractEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ContractEIP712DomainChangedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ContractEIP712DomainChangedIterator{contract: _Contract.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ContractEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEIP712DomainChanged)
				if err := _Contract.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) ParseEIP712DomainChanged(log types.Log) (*ContractEIP712DomainChanged, error) {
	event := new(ContractEIP712DomainChanged)
	if err := _Contract.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Contract contract.
type ContractPausedIterator struct {
	Event *ContractPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPaused represents a Paused event raised by the Contract contract.
type ContractPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) FilterPaused(opts *bind.FilterOpts) (*ContractPausedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ContractPausedIterator{contract: _Contract.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractPaused) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPaused)
				if err := _Contract.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) ParsePaused(log types.Log) (*ContractPaused, error) {
	event := new(ContractPaused)
	if err := _Contract.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Contract contract.
type ContractTransferBatchIterator struct {
	Event *ContractTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransferBatch represents a TransferBatch event raised by the Contract contract.
type ContractTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Contract *ContractFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ContractTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferBatchIterator{contract: _Contract.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Contract *ContractFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *ContractTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransferBatch)
				if err := _Contract.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Contract *ContractFilterer) ParseTransferBatch(log types.Log) (*ContractTransferBatch, error) {
	event := new(ContractTransferBatch)
	if err := _Contract.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Contract contract.
type ContractTransferSingleIterator struct {
	Event *ContractTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransferSingle represents a TransferSingle event raised by the Contract contract.
type ContractTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Contract *ContractFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ContractTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferSingleIterator{contract: _Contract.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Contract *ContractFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *ContractTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransferSingle)
				if err := _Contract.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Contract *ContractFilterer) ParseTransferSingle(log types.Log) (*ContractTransferSingle, error) {
	event := new(ContractTransferSingle)
	if err := _Contract.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Contract contract.
type ContractURIIterator struct {
	Event *ContractURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractURI represents a URI event raised by the Contract contract.
type ContractURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Contract *ContractFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*ContractURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &ContractURIIterator{contract: _Contract.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Contract *ContractFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *ContractURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractURI)
				if err := _Contract.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Contract *ContractFilterer) ParseURI(log types.Log) (*ContractURI, error) {
	event := new(ContractURI)
	if err := _Contract.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Contract contract.
type ContractUnpausedIterator struct {
	Event *ContractUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractUnpaused represents a Unpaused event raised by the Contract contract.
type ContractUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ContractUnpausedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ContractUnpausedIterator{contract: _Contract.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractUnpaused) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractUnpaused)
				if err := _Contract.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) ParseUnpaused(log types.Log) (*ContractUnpaused, error) {
	event := new(ContractUnpaused)
	if err := _Contract.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
